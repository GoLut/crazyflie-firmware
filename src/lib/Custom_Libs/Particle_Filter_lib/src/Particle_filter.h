#ifndef PARTICLE_FILTER_H_
#define PARTICLE_FILTER_H_

#include <stdint.h>

#define PARTICLE_FILTER_NUM_OF_PARTICLES 10
#define MAP_SIZE 10

//a particle is a single aporximation of the location of the crazyflie
typedef struct Particles
{
    //the velocity 1 time step back
    float v_x_, v_y_, v_z_;
    //the current position before resampling
    float x_curr, y_curr, z_curr;
    //new possiition after resampling
    float x_new, y_new, z_new;
    //probability of the particle based on its location
    uint16_t prob;
    //expected color based on its location
    uint8_t expected_color;
} Particle;

//unititialized array of particles 
//we statically allocate this before hand.
Particle particles[PARTICLE_FILTER_NUM_OF_PARTICLES];

//the map
//TODO make python script for this later to export the map generated by the map algorithm
const uint8_t COLOR_MAP[MAP_SIZE][MAP_SIZE]={
{0,10,20,30,40,50,60,70,80,90},
{1,11,21,31,41,51,61,71,81,91},
{2,12,22,32,42,52,62,72,82,92},
{3,13,23,33,43,53,63,73,83,93},
{4,14,24,34,44,54,64,74,84,94},
{5,15,25,35,45,55,65,75,85,95},
{6,16,26,36,46,56,66,76,86,96},
{7,17,27,37,47,57,67,77,87,97},
{8,18,28,38,48,58,68,78,88,98},
{9,19,29,39,49,59,69,79,89,99}
};  

//we initialize the content of the particle filter
//eg the uniform distribution of particles;
    //gen_uniform_particle_distribution
    //gen_initial_probability
uint8_t particle_filter_init();


//this function needs to be run and will update the particle filter
//we give it the delta time to estimate the traversed distance.
uint8_t particle_filter_update(uint8_t last_recieved_color_ID, uint32_t sys_time_ms);


#endif // PARTICLE_FILTER_H_